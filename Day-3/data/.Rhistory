object = seurat,
#slot = counts,
features = gene_to_plot,
pt.size = 0.1,
max.cutoff = 'q95'
)
# combine plots
p <- plot1 | plot2
p
# UMAP feature plot with GA sores
plot2 <- FeaturePlot(
object = seurat,
#slot = counts,
features = gene_to_plot,
pt.size = 0.1,
#max.cutoff = 'q95'
)
plot2
?FeaturePlot
log2(5)
# set default asssay to chromvar scores
DefaultAssay(seurat) <- 'chromvar'
# look at the activity of Mef2c
p <- FeaturePlot(object = seurat,
features = "MA0080.4",
min.cutoff = 'q10',
max.cutoff = 'q90',
pt.size = 0.1)
p
# look at the activity of Mef2c
p <- FeaturePlot(object = seurat,
features = "MA0080.4",
#min.cutoff = 'q10',
#max.cutoff = 'q90',
pt.size = 0.1)
p
# look at the activity of Mef2c
p <- FeaturePlot(object = seurat,
features = "MA0080.4",
#min.cutoff = 'q10',
max.cutoff = 'q90',
pt.size = 0.1)
p
# look at the activity of Mef2c
p <- FeaturePlot(object = seurat,
features = "MA0080.4",
min.cutoff = 'q10',
max.cutoff = 'q90',
pt.size = 0.1)
p
DefaultAssay(seurat) <- 'GA'
gene_to_plot <- "Thsd1"
# violin plot
plot1 <- plotExpression(sce,
features = gene_to_plot,
x = "cluster",
colour_by = "cluster") +
guides(fill = guide_legend(override.aes = list(size = 5, alpha = 1))) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# UMAP feature plot with GA sores
plot2 <- FeaturePlot(
object = seurat,
#slot = counts,
features = gene_to_plot,
pt.size = 0.1,
#max.cutoff = 'q95'
)
plot2
# combine plots
p <- plot1 | plot2
p
plot2
# UMAP feature plot with GA sores
plot2 <- FeaturePlot(
object = seurat,
#slot = counts,
features = gene_to_plot,
pt.size = 0.1,
max.cutoff = 'q95'
)
plot2
gene_to_plot <- "4933404K13Rik"
# violin plot
plot1 <- plotExpression(sce,
features = gene_to_plot,
x = "cluster",
colour_by = "cluster") +
guides(fill = guide_legend(override.aes = list(size = 5, alpha = 1))) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# UMAP feature plot with GA sores
plot2 <- FeaturePlot(
object = seurat,
#slot = counts,
features = gene_to_plot,
pt.size = 0.1,
max.cutoff = 'q95'
)
plot2
# UMAP feature plot with GA sores
plot2 <- FeaturePlot(
object = seurat,
#slot = counts,
features = gene_to_plot,
pt.size = 0.1,
#max.cutoff = 'q95'
)
plot2
rownames(ga)
identical(colnames(ga), rownames(meta))
###### CHROMVAR ########
seurat@assays$chromvar@data[1:5,1:5]
hist(ga["4933404K13Rik",])
head(colnames(ga))
View(umap)
identical(rownames(umap), rownames(meta))
identical(rownames(umap), colnames(ga))
###### UMAP ########
umap <- as.data.frame(seurat@reductions$umap@cell.embeddings)
umap$cellName <- rownames(umap)
rownames(umap) <- NULL
umap <- umap[,c("cellName", "UMAP_1", "UMAP_2")]
umap <- umap[match(rownames(ga), umap$cellName),]
colnames(umap)[2:3] <- c("x", "y")
identical(rownames(umap), rownames(meta))
identical(rownames(umap), colnames(ga))
###### UMAP ########
umap <- as.data.frame(seurat@reductions$umap@cell.embeddings)
umap$cellName <- rownames(umap)
rownames(umap) <- NULL
umap <- umap[,c("cellName", "UMAP_1", "UMAP_2")]
match(rownames(ga), umap$cellName)
match(colnames(ga), umap$cellName)
umap <- umap[match(colnames(ga), umap$cellName),]
colnames(umap)[2:3] <- c("x", "y")
identical(rownames(umap), rownames(meta))
identical(rownames(umap), colnames(ga))
colnames(ga)
length(rownames(umap))
length(colnames(ga))
table(rownames(umap) %in% colnames(ga))
rownames(umap)
identical(umap$cellName, colnames(ga))
write.table(umap, file = "~/BISR/turk/processed-data/umap.tsv", row.names=FALSE, sep="\t")
###### UMAP ########
umap <- as.data.frame(seurat@reductions$umap@cell.embeddings)
umap$cellName <- rownames(umap)
rownames(umap) <- NULL
umap <- umap[,c("cellName", "UMAP_1", "UMAP_2")]
umap <- umap[match(colnames(ga), umap$cellName),]
colnames(umap)[2:3] <- c("x", "y")
write.table(umap, file = "~/BISR/turk/processed-data/umap.tsv", row.names=FALSE, sep="\t")
seurat@assays$chromvar@data[1:5,1:5]
cnts <- as.matrix(seurat@assays$chromvar@data)
motif_list <- unlist(seurat@assays$peaks@motifs@motif.names)
identical(names(motif_list), rownames(cnts))
rownames(cnts) <- paste0(motif_list, "_(", names(motif_list), ")")
identical(umap$cellName, colnames(cnts))
umap <- as.data.frame(seurat@reductions$umap@cell.embeddings)
umap$cellName <- rownames(umap)
rownames(umap) <- NULL
umap <- umap[,c("cellName", "UMAP_1", "UMAP_2")]
umap <- umap[match(colnames(ga), umap$cellName),]
colnames(umap)[2:3] <- c("x", "y")
write.table(umap, file = "~/BISR/turk/processed-data/umap.tsv", row.names=FALSE, sep="\t")
identical(umap$cellName, colnames(ga))
match(colnames(ga), umap$cellName)
plot(match(colnames(ga), umap$cellName))
seurat@assays$GA@counts
seurat@assays$GA@counts["4933404K13Rik", "CCTATTAAGTGCAACG-1_1"]
ga["4933404K13Rik", "CCTATTAAGTGCAACG-1_1"]
seurat@assays$GA@counts["4933404K13Rik", "CCACAGGAGTCCGGAA-1_1"]
ga["4933404K13Rik", "CCACAGGAGTCCGGAA-1_1"]
meta["CCACAGGAGTCCGGAA-1_1",]
seurat@meta.data["CCACAGGAGTCCGGAA-1_1",]
View(meta)
###### metadata ########
meta <- seurat@meta.data
meta <- meta[, c(!colnames(meta) %in% c("seurat_clusters", "DNase_sensitive_region_fragments",
"enhancer_region_fragments", "promoter_region_fragments",
"on_target_fragments", "blacklist_region_fragments",
"peak_region_fragments", "peak_region_cutsites",
"duplicate", "chimeric", "unmapped", "lowmapq",
"mitochondrial", "passed_filters", "nCount_RNA",
"nFeature_RNA", "nCount_d45Peaks", "nFeature_d45Peaks",
"is__cell_barcode", "nucleosome_percentile", "nucleosome_group", "high.tss", "d45Peaks_snn_res.1.2"))]
colnames(meta)
write.table(meta, file = "~/BISR/turk/processed-data/metadata.tsv", sep="\t")
identical(umap$cellName, rownames(meta))
identical(umap$cellName, colnames(ga))
identical(umap$cellName, colnames(cnts))
###### metadata ########
meta <- seurat@meta.data
meta$cellName <- rownames(meta)
rownames(meta) <- NULL
View(meta)
c(!colnames(meta) %in% "cellName")
c("cellName", c(!colnames(meta) %in% "cellName"))
###### metadata ########
meta <- seurat@meta.data
meta$cellName <- rownames(meta)
rownames(meta) <- NULL
ncol(meta)
meta[,48]
meta <- meta[, c(48, 1:47)]
View(meta)
meta <- meta[, c(!colnames(meta) %in% c("seurat_clusters", "DNase_sensitive_region_fragments",
"enhancer_region_fragments", "promoter_region_fragments",
"on_target_fragments", "blacklist_region_fragments",
"peak_region_fragments", "peak_region_cutsites",
"duplicate", "chimeric", "unmapped", "lowmapq",
"mitochondrial", "passed_filters", "nCount_RNA",
"nFeature_RNA", "nCount_d45Peaks", "nFeature_d45Peaks",
"is__cell_barcode", "nucleosome_percentile", "nucleosome_group", "high.tss", "d45Peaks_snn_res.1.2"))]
colnames(meta)
head(meta)
write.table(meta, file = "~/BISR/turk/processed-data/metadata.tsv", sep="\t")
###### metadata ########
meta <- seurat@meta.data
meta$cellName <- rownames(meta)
rownames(meta) <- NULL
meta <- meta[, c(48, 1:47)]
meta <- meta[, c(!colnames(meta) %in% c("seurat_clusters", "DNase_sensitive_region_fragments",
"enhancer_region_fragments", "promoter_region_fragments",
"on_target_fragments", "blacklist_region_fragments",
"peak_region_fragments", "peak_region_cutsites",
"duplicate", "chimeric", "unmapped", "lowmapq",
"mitochondrial", "passed_filters", "nCount_RNA",
"nFeature_RNA", "nCount_d45Peaks", "nFeature_d45Peaks",
"is__cell_barcode", "nucleosome_percentile", "nucleosome_group", "high.tss", "d45Peaks_snn_res.1.2"))]
colnames(meta)
head(meta)
write.table(meta, file = "~/BISR/turk/processed-data/metadata.tsv", sep="\t")
write.table(meta, file = "~/BISR/turk/processed-data/metadata.tsv", row.names = FALSE, sep="\t")
write.table(ga[1:10,], file = "~/BISR/turk/processed-data/GA-mat.tsv", sep="\t")
ga{1:5,1:5}
ga[1:5,1:5]
###### CHROMVAR ########
seurat@assays$chromvar@data[1:5,1:5]
cnts <- as.matrix(seurat@assays$chromvar@data)
motif_list <- unlist(seurat@assays$peaks@motifs@motif.names)
identical(names(motif_list), rownames(cnts))
rownames(cnts) <- paste0(motif_list, "_(", names(motif_list), ")")
cnts
cnts[1:5,1:5]
cnts[1:5,1:5]
cnts$motifs
rownames(cnts)
cnts$motifs <- rownames(cnts)
cnts <- as.matrix(seurat@assays$chromvar@data)
motif_list <- unlist(seurat@assays$peaks@motifs@motif.names)
identical(names(motif_list), rownames(cnts))
rownames(cnts) <- paste0(motif_list, "_(", names(motif_list), ")")
cnts <- as.data.frame(cnts)
cnts[1:5,1:5]
cnts$motifs <- rownames(cnts)
cnts[1:5,1:5]
ncol(cnts)
1:(ncol(cnts)-1))
1:(ncol(cnts)-1)
###### CHROMVAR ########
seurat@assays$chromvar@data[1:5,1:5]
cnts <- as.matrix(seurat@assays$chromvar@data)
motif_list <- unlist(seurat@assays$peaks@motifs@motif.names)
identical(names(motif_list), rownames(cnts))
rownames(cnts) <- paste0(motif_list, "_(", names(motif_list), ")")
cnts <- as.data.frame(cnts)
cnts[1:5,1:5]
cnts$motifs <- rownames(cnts)
rownames(cnts) <- NULL
cnts <- cnts[, c(ncol(cnts), 1:(ncol(cnts)-1))]
cnts[1:5,1:5]
write.table(cnts, file = "~/BISR/turk/processed-data/chromvar-mat.tsv", row.names = FALSE, sep="\t")
# add gene activity scores to seurat dataset and visualize
cicero_gene_activities_2 <- log2(cicero_gene_activities*1000000 + 1)
seurat[["GA"]] <- CreateAssayObject(counts = cicero_gene_activities_2)
ga <- as.matrix(seurat@assays$GA@counts)
ga <- as.data.frame(ga)
ga[1:5,1:5]
ga$motifs <- rownames(ga)
rownames(ga) <- NULL
ga <- ga[, c(ncol(ga), 1:(ncol(ga)-1))]
ga[1:5,1:5]
ga <- as.matrix(seurat@assays$GA@counts)
ga <- as.data.frame(ga)
ga[1:5,1:5]
ga$gene <- rownames(ga)
rownames(ga) <- NULL
ga <- ga[, c(ncol(ga), 1:(ncol(ga)-1))]
ga[1:5,1:5]
write.table(ga[1:10,], file = "~/BISR/turk/processed-data/GA-mat.tsv", row.names = FALSE, sep="\t")
write.table(ga, file = "~/BISR/turk/processed-data/GA-mat.tsv", row.names = FALSE, sep="\t")
cnts <- as.matrix(seurat@assays$peaks@data)
rownames(cnts) <- gsub("-", "_", rownames(cnts))
cnts <- as.data.frame(cnts)
cnts[1:5,1:5]
cnts$peak <- rownames(cnts)
rownames(cnts) <- NULL
cnts <- cnts[, c(ncol(cnts), 1:(ncol(cnts)-1))]
cnts[1:5,1:5]
write.table(cnts, file = "~/BISR/turk/processed-data/peaks-mat.tsv", row.names = FALSE, sep="\t")
ga <- as.matrix(seurat@assays$GA@counts)
ga <- as.data.frame(ga)
ga[1:5,1:5]
ga$gene <- rownames(ga)
rownames(ga) <- NULL
ga <- ga[, c(ncol(ga), 1:(ncol(ga)-1))]
ga[1:5,1:5]
write.table(ga, file = "~/BISR/turk/processed-data/GA-mat.tsv", row.names = FALSE, sep="\t")
hist(ga["4933404K13Rik",])
identical(colnames(ga), rownames(meta))
###### CHROMVAR ########
seurat@assays$chromvar@data[1:5,1:5]
cnts <- as.matrix(seurat@assays$chromvar@data)
motif_list <- unlist(seurat@assays$peaks@motifs@motif.names)
identical(names(motif_list), rownames(cnts))
rownames(cnts) <- paste0(motif_list, "_(", names(motif_list), ")")
cnts <- as.data.frame(cnts)
cnts[1:5,1:5]
cnts$motif <- rownames(cnts)
rownames(cnts) <- NULL
cnts <- cnts[, c(ncol(cnts), 1:(ncol(cnts)-1))]
cnts[1:5,1:5]
write.table(cnts, file = "~/BISR/turk/processed-data/chromvar-mat.tsv", row.names = FALSE, sep="\t")
###### metadata ########
meta <- seurat@meta.data
meta$cellName <- rownames(meta)
rownames(meta) <- NULL
meta <- meta[, c(48, 1:47)]
meta <- meta[, c(!colnames(meta) %in% c("seurat_clusters", "DNase_sensitive_region_fragments",
"enhancer_region_fragments", "promoter_region_fragments",
"on_target_fragments", "blacklist_region_fragments",
"peak_region_fragments", "peak_region_cutsites",
"duplicate", "chimeric", "unmapped", "lowmapq",
"mitochondrial", "passed_filters", "nCount_RNA",
"nFeature_RNA", "nCount_d45Peaks", "nFeature_d45Peaks",
"is__cell_barcode", "nucleosome_percentile", "nucleosome_group", "high.tss", "d45Peaks_snn_res.1.2"))]
colnames(meta)
head(meta)
write.table(meta, file = "~/BISR/turk/processed-data/metadata.tsv", row.names = FALSE, sep="\t")
###### UMAP ########
umap <- as.data.frame(seurat@reductions$umap@cell.embeddings)
umap$cellName <- rownames(umap)
rownames(umap) <- NULL
umap <- umap[,c("cellName", "UMAP_1", "UMAP_2")]
umap <- umap[match(colnames(ga), umap$cellName),]
colnames(umap)[2:3] <- c("x", "y")
write.table(umap, file = "~/BISR/turk/processed-data/umap.tsv", row.names=FALSE, sep="\t")
df0 <- readGFF("~/Downloads/FungiDB-52_AfumigatusAf293.gff")
library(rtracklayer)
gff <- readGFF("~/Downloads/FungiDB-52_AfumigatusAf293.gff")
gff
export(gff, "~/Downloads/FungiDB-52_AfumigatusAf293-mod.gff3", format = "GFF3")
export(gff, "~/Downloads/FungiDB-52_AfumigatusAf293-mod.gff3", format = "GTF")
export(gff, "~/Downloads/FungiDB-52_AfumigatusAf293-mod.gtf", format = "GTF")
?export
export(gff, "~/Downloads/FungiDB-52_AfumigatusAf293-mod.gff3", format = "GFF1")
export(gff, "~/Downloads/FungiDB-52_AfumigatusAf293-mod.gff1", format = "GFF1")
export(gr, "~/Downloads/tmp.gtf")
export(gff, "~/Downloads/tmp.gtf")
export(gff, "~/Downloads/FungiDB-52_AfumigatusAf293-mod.gff3", format = "gff3")
12/30
8/30
2/30
40+27+7+&+7+7+10
40+27+7+7+7+7+10
1/30
242*5
136/30
400*0.2
samples <- read.csv(paste0("~/Desktop/meta-data.csv"), stringsAsFactors = FALSE)
View(samples)
plot(samples$age)
boxplot(samples$age ~ samples$group)
hist(samples$age)
360+180
1400/60
1400/23
60*22
60*23
library(GenomicRanges)
gr <- GRanges(
seqnames = rep("chr1", 10),
ranges = IRanges(start = c(1,2,3,3,5,6,7,7,8,11), width = c(4,4,4,4,3,3,3,3,3,3)),
names = paste0("r", "-", seq(1,10)),
strand = c(rep("+", 2), rep("-", 3), rep("*", 3), rep("+", 2)),
score = rnorm(10,5,2))
gr[1]
gr[[1]]
gr[1][["r-1"]]
swetwd("/Users/omw/Documents/GitHub/Bioinformatics_workshop-Dec-2021/Day-3/data/")
setwd("/Users/omw/Documents/GitHub/Bioinformatics_workshop-Dec-2021/Day-3/data/")
results <- read.csv("diff-exp-results.csv", stringsAsFactors = F, row.names = "ensembl")
results <- read.csv("diff-exp-results.csv", stringsAsFactors = F, row.names = "ensembl")
results$symbol <- gene.symbols
# check the new results table
head(results)
# make sure there are no NAs in the symbols column we just created
table(is.na(results$symbol))
library(EnsDb.Hsapiens.v86)
# using mapIds but only to get gene symbol
gene.symbols <- mapIds(org.Hs.eg.db, keys = rownames(results), column = c("SYMBOL"), keytype="ENSEMBL")
# add a symbols column to results with the gene symbols we just retreived
results$symbol <- gene.symbols
library(org.Hs.eg.db)
# using mapIds but only to get gene symbol
gene.symbols <- mapIds(org.Hs.eg.db, keys = rownames(results), column = c("SYMBOL"), keytype="ENSEMBL")
# add a symbols column to results with the gene symbols we just retreived
results$symbol <- gene.symbols
# check the new results table
head(results)
# make sure there are no NAs in the symbols column we just created
table(is.na(results$symbol))
library(EnsDb.Hsapiens.v86)
# using mapIds but only to get gene symbol
gene.symbols.2 <- mapIds(EnsDb.Hsapiens.v86, keys = head(entrez.ids), column = c("SYMBOL"), keytype="ENSEMBL")
entrez.ids <- keys(org.Hs.eg.db, keytype="ENSEMBL")
# make sure there are no NAs in the symbols column we just created
table(is.na(results$symbol))
library(EnsDb.Hsapiens.v86)
# using mapIds but only to get gene symbol
gene.symbols.2 <- mapIds(EnsDb.Hsapiens.v86, keys = head(entrez.ids), column = c("SYMBOL"), keytype="ENSEMBL")
# using mapIds but only to get gene symbol
gene.symbols.2 <- mapIds(EnsDb.Hsapiens.v86, keys = head(entrez.ids), column = c("GENEID"), keytype="ENSEMBL")
# using mapIds but only to get gene symbol
gene.symbols.2 <- mapIds(EnsDb.Hsapiens.v86, keys = head(entrez.ids), column = c("SYMBOL"), keytype="GENEID")
# how long is it
length(gene.symbols.2)
# add a symbols column to results with the gene symbols we just retreived
results$symbol <- gene.symbols
# check the new results table
head(results)
# make sure there are no NAs in the symbols column we just created
table(is.na(results$symbol))
# how many NAs
table(is.na(gene.symbols.2))
gene.symbols.2
EnsDb.Hsapiens.v86
################################################
library(org.Hs.eg.db)
################################################
org.Hs.eg.db
# what class is it
class(org.Hs.eg.db)
# what types of data can be extracted?
keytypes(org.Hs.eg.db)
################################################
# obtain all ENSEMBL IDs
entrez.ids <- keys(org.Hs.eg.db, keytype="ENSEMBL")
head(entrez.ids)
# how many are there
length(entrez.ids)
################################################
# use ensembl id of first 6 in entrez.ids to get desired keytypes
select(org.Hs.eg.db, keys = head(entrez.ids), columns = c("SYMBOL","ENTREZID", "REFSEQ"), keytype="ENSEMBL")
# using mapIds but only to get gene symbol
mapIds(org.Hs.eg.db, keys = head(entrez.ids), column = c("SYMBOL"), keytype="ENSEMBL")
################################################
# read in data
results <- read.csv("diff-exp-results.csv", stringsAsFactors = F, row.names = "ensembl")
# check the first few lines
head(results)
################################################
# using mapIds but only to get gene symbol
gene.symbols <- mapIds(org.Hs.eg.db, keys = rownames(results), column = c("SYMBOL"), keytype="ENSEMBL")
#'select()' returned 1:many mapping between keys and columns
length(gene.symbols)
# add a symbols column to results with the gene symbols we just retreived
results$symbol <- gene.symbols
# check the new results table
head(results)
# make sure there are no NAs in the symbols column we just created
table(is.na(results$symbol))
################################################
library(EnsDb.Hsapiens.v86)
################################################
# using mapIds but only to get gene symbol
gene.symbols.2 <- mapIds(EnsDb.Hsapiens.v86, keys = head(entrez.ids), column = c("SYMBOL"), keytype="GENEID")
# how long is it
length(gene.symbols.2)
# how many NAs
table(is.na(gene.symbols.2))
keytypes(EnsDb.Hsapiens.v86)
gene.symbols <- mapIds(EnsDb.Hsapiens.v86, keys = rownames(results),
column = c("SYMBOL"), keytype="GENEID")
gene.symbols
gene.symbols
table(is.na(gene.symbols))
################################################
anno <- read.table("GRCh38.p12_ensembl-97.txt", sep="\t", header=TRUE, stringsAsFactors = F)
# check the first few rows and dimensions
head(anno)
dim(anno)
head(results)
# check how many Ensembl IDs overlap with our results
table(anno$Gene.stable.ID %in% rownames(results))
table(rownames(results) %in% anno$Gene.stable.ID)
# lets rename the ensembl ID column in both datasets so that we can merge them together based on those IDs
colnames(anno)[1] <- "ensembl"
results$ensembl <- rownames(results)
head(results)
results_merge <- merge(results, anno, by="ensembl")
head(results_merge)
table(is.na(results_merge$Gene.name))
################################################
library(biomaRt)
################################################
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
# assign to txdb variable
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
txdb
#### DO NOT RUN ####
txdb <- makeTxDbFromEnsembl("homo_sapiens", release = 101)
